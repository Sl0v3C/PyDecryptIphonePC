import hmac, threading, os
import hashlib
import base64


iterations = 1000
DIV = 2500
begin = [0, 1000, 2500, 5000, 7500]

def findPasswd(hashStr, saltStr):
    "Find the password of the Parental Contol"
    task_list = []

    t1 = threading.Thread(target=matchSmallNumberHash,args=(1000, hashStr, saltStr))
    task_list.append(t1)
    t2 = threading.Thread(target=matchHash,args=(2500, hashStr, saltStr))
    task_list.append(t2)
    t3 = threading.Thread(target=matchHash,args=(5000, hashStr, saltStr))
    task_list.append(t3)
    t4 = threading.Thread(target=matchHash,args=(7500, hashStr, saltStr))
    task_list.append(t4)
    t5 = threading.Thread(target=matchHash,args=(10000, hashStr, saltStr))
    task_list.append(t5)
    
    for t in task_list:
        t.start()
    for t in task_list:
        t.join()

def getHash(key, salt):
    Hash = hashlib.pbkdf2_hmac('sha1', bytes(key.encode()), base64.b64decode(salt), iterations)
    Hash = base64.b64encode(Hash)
    return Hash

def compare(newStr, oldStr, passwd):
    if newStr == bytes(oldStr.encode()):
        # TODO send signal to stop all the thread
        print("************ Found it!!!!! ************ The password is ", passwd)
        with open("result.txt", "w") as f:
            BUF = "Password: " + passwd
            f.write(BUF)
        return True

    return False

def matchSmallNumberHash(count, hashStr, saltStr):
    keyStr = ""
    for i in range(0, 10):
        keyStr = "000" + str(i)
        newHash = getHash(keyStr, saltStr)
        if compare(newHash, hashStr, keyStr):
            #TODO
            return

    for i in range(10, 100):
        keyStr = "00" + str(i)
        newHash = getHash(keyStr, saltStr)
        if compare(newHash, hashStr, keyStr):
            #TODO
            return
   
    for i in range(100, count):
        keyStr = "0" + str(i)
        newHash = getHash(keyStr, saltStr)
        if compare(newHash, hashStr, keyStr):
            #TODO
            return
            
def matchHash(count, hashStr, saltStr):
    "Compare the new hash which generated by key & salt with hashStr"
    for i in range(begin[int(count/DIV)], count):
        newHash = getHash(str(i), saltStr)
        if compare(newHash, hashStr, str(i)):
            #TODO
            return

if __name__ == "__main__":
    findPasswd("axo6VEI3Tn2ekTeLxA8KBBmH7CA=", "GuCyTQ==")
